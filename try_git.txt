Directory:
A folder used for storing multiple files.

Repository:
A directory where Git has been initialized to start version controlling your files.

Command: git init
Function: Creates a hidden .git directory

Command: git status
Function: Tells you the current status of the directory

4 Main Areas:
staged:
Files are ready to be committed.

unstaged:
Files with changes that have not been prepared to be committed.

untracked:
Files aren't tracked by Git yet. This usually indicates a newly created file.

deleted:
File has been deleted and is waiting to be removed from Git.

Command: git add file.txt
Function: adds file to the Staging Area

add all:
You can also type git add -A . where the dot stands for the current directory, so everything in and beneath it is added. The -A ensures even file deletions are included.

git reset:
You can use git reset <filename> to remove a file or files from the staging area.

Commit: 
A "commit" is a snapshot of our repository. This way if we ever need to look back at the changes we've made (or if someone else does), we will see a nice timeline of all changes.

Command: git commit -m "message"
Function: commit files in the staging area

Command: git add '*.txt'
Function: Add all files in the .git directory with the extension .txt to the staging area

Wildcards:
We need quotes so that Git will receive the wildcard before our shell can interfere with it. Without quotes our shell will only execute the wildcard search within the current directory. Git will receive the list of files the shell found instead of the wildcard and it will not be able to add the files inside of the octofamily directory.

Command: git reset HEAD <file>, git reset <file>
Function: To unstage a file from staging area

Check all the things!
When using wildcards you want to be extra careful when doing commits. Make sure to check what files and folders are staged by using git status before you do the actual commit. This way you can be sure you're committing only the things you want.

Command: git log
Function: a journal that remembers all the changes we've committed so far

More useful logs:
Use git log --summary to see more information for each commit. You can see where new files were added for the first time or where files were deleted. It's a good overview of what's going on in the project.

Command: $ git remote add origin url
Function: push our local repo to GitHub server

git remote:
Git doesn't care what you name your remotes, but it's typical to name your main one origin.

Command: git push -u origin master
Function: push our changes to origin repo on github

Note: The name of our remote is origin and the default local branch name is master. The -u tells Git to remember the parameters, so that next time we can simply run git push and Git will know what to do. The push command tells Git where to put our commits when we're ready.

GitHub Hooks: https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks

Command: git pull origin master
Function: We can check for changes on our GitHub repository and pull down any new changes.

git stash:
Sometimes when you go to pull you may have changes you don't want to commit just yet. One option you have, other than committing, is to stash the changes.

Use the command 'git stash' to stash your changes, and 'git stash apply' to re-apply your changes after your pull.

Command: git diff HEAD
Function: If we want the diff of our most recent commit, which we can refer to using the HEAD pointer.

HEAD
The HEAD is a pointer that holds your position within all your different commits. By default HEAD points to your most recent commit, so it can be used as a quick way to reference that commit without having to look up the SHA.

Note: Another great use for diff is looking at changes within files that have already been staged.

Commit Etiquette:
You want to try to keep related changes together in separate commits. Using 'git diff' gives you a good overview of changes you have made and lets you add files or directories one at a time and commit them separately.

Command: git diff --staged
Function: To see the changes you just staged.

Command: git checkout -- file.txt, git checkout -- <target>
Function: Files can be changed back to how they were at the last commit

The '--'
It's simply promising the command line that there are no more options after the '--'. This way if you happen to have a branch named octocat.txt, it will still revert the file, instead of switching to the branch of the same name.

Command: git branch <branch_name>
Function: create a new branch

Branching
Branches are what naturally happens when you want to work on multiple features at the same time. You wouldn't want to end up with a master branch which has Feature A half done and Feature B half done.

Rather you'd separate the code base into two "snapshots" (branches) and work on and commit to them separately. As soon as one was ready, you might merge this branch back into the master branch and push it to the remote server.

Command: git checkout <branch_name>
Function: Switch to the new branch

You can use:
git checkout -b new_branch

to checkout and create a branch at the same time. This is the same thing as doing:

git branch new_branch
git checkout new_branch

Command: git rm '*.txt'
Function: removes the files and stages them for removal

Remove all the things!
if you want to remove an entire folder, You can use the recursive option on git rm:

git rm -r folder_of_cats

This will recursively remove all folders and files from the given directory.

The '-a' option
If you happen to delete a file without using 'git rm' you'll find that you still have to 'git rm' the deleted files from the working tree. You can save this step by using the '-a' option on 'git commit', which auto removes deleted files with the commit.

git commit -am "Delete stuff"

Command: git checkout master
Function: switch back to the master branch

Pull Requests
If you're hosting your repo on GitHub, you can do something called a pull request.

A pull request allows the boss of the project to look through your changes and make comments before deciding to merge in the change. It's a really great feature that is used all the time for remote workers and open-source projects.

Pull Requests: https://help.github.com/articles/about-pull-requests/

Command: git merge <branch_name>
Function: merge or copy changes from the second branch to the master branch

Merge Conflicts
Merge Conflicts can occur when changes are made to a file at the same time. A lot of people get really scared when a conflict happens, but fear not! They aren't that scary, you just need to decide which code to keep.
https://git-scm.com/book/en/v2
https://git-scm.com/docs/git-merge#_how_conflicts_are_presented

Command: git branch -d <branch name>
Function: to delete a branch

Force delete
What if you have been working on a feature branch and you decide you really don't want this feature anymore? You might decide to delete the branch since you're scrapping the idea. You'll notice that git branch -d bad_feature doesn't work. This is because -d won't let you delete something that hasn't been merged.

You can either add the --force (-f) option or use -D which combines -d -f together into one command.

Git/GitHub resources:
https://git-scm.com/docs
https://git-scm.com/book/en/v2
https://help.github.com/